# Docker run command
# docker run --rm --gpus all --log-opt max-size=10m --log-opt max-file=1 -e PLATFORM=U -e STRATUM_IP=suomi.straffesites.be -e STRATUM_PORT=3333 quainetwork/quai-gpu-miner-run


// VOORBEELDEN
# Use an Ubuntu image or another suitable base imageminer# cat Dockerfile.build  
FROM ubuntu:20.04

# Set environment variables to avoid user interaction during package installation
ENV DEBIAN_FRONTEND=noninteractive

# Install required dependencies including CUDA toolkit
RUN apt update && apt install -y \
    build-essential \
    cmake \
    mesa-common-dev \
    git \
    wget && \
    wget https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2004/x86_64/cuda-keyring_1.1-1_all.deb && \
    dpkg -i cuda-keyring_1.1-1_all.deb && \
    apt update && apt install -y cuda-toolkit-12-6 && \
    rm -rf /var/lib/apt/lists/* /cuda-keyring_1.1-1_all.deb

# Copy dependency and build script into the container
COPY deploy_miner.sh .

# Make deploy script executable
RUN chmod +x deploy_miner.sh

# Run the script to build the binary
CMD ["./deploy_miner.sh"]

----

# Use an Ubuntu image or another suitable base image
FROM quainetwork/quai-gpu-miner-build:latest

RUN ./deploy_miner.sh

RUN wget https://repo.radeon.com/amdgpu-install/latest/ubuntu/focal/amdgpu-install_6.2.60202-1_all.deb && \
    apt update && apt install -y \
    ./amdgpu-install_6.2.60202-1_all.deb \
    cuda-drivers

RUN amdgpu-install -y --accept-eula

ENV PLATFORM=""
ENV STRATUM_IP=""
ENV STRATUM_PORT=""

# Entrypoint is sh so it can accept the arguments
ENTRYPOINT ["sh", "-c"]

# CMD will construct the full command using the environment variables
CMD ["./quai-gpu-miner/quai-gpu-miner/quai-gpu-miner -${PLATFORM} -P stratum://${STRATUM_IP}:${STRATUM_PORT}"]
